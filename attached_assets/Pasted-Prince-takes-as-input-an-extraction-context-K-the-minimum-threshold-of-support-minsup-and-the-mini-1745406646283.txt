Prince takes as input an extraction context K, the minimum threshold of support
minsup and the minimum threshold of confidence minconf. It outputs the
list of the frequent closed itemsets and their associated minimal generators as
well as generic bases of association rules. Thus, Prince operates in three successive
steps: (i) Minimal generator determination (ii) Partial order construction
(iii) Extraction of generic rule bases.
4.1 Minimal Generator Determination
Following the ”Test-and-generate” technique, Prince traverses the search space
by level to determine the set of frequent minimal generators FMGK sorted by
350 T. Hamrouni, S.B. Yahia, and Y. Slimani
decreasing support values as well as the negative border of minimal generators
GBd−(4)[13]. In the second step, the set of frequent minimal generators will
serve as a backbone to construct the minimal generator lattice. As in the case of
Titanic, the negative border will be used, in the second step, to determine the
support of a non-minimal generator using the following proposition:
Proposition 1. [7] Let MGK=FMGK ∪ GBd− be the set of minimal generators
extracted from the context K. If X is not a minimal generator then Supp(X)
= min {Supp(g) | g ∈ MGK and g ⊂ X}.
Prince uses, in this step, the same pruning strategies introduced in Titanic
namely minsup, the ideal order of the minimal generators and the estimated
support.
4.2 Partial Order Construction
In this step, the frequent minimal generator setFMGK will form a minimal generator
lattice, and this without any access to the extraction context. The main
idea is how to construct the partial order without computing itemset closures,
i.e., how guessing the subsumption relation by only comparing minimal generators?
To achieve this goal, the list of immediate successors(5) of each equivalence
class will be updated in an iterative way. The processing of the frequent minimal
generator set is done according to the order imposed in the first step (i.e., by decreasing
support values). Each frequent minimal generator g of size k (k ≥ 1) is
introduced into the minimal generator lattice by comparing it to the immediate
successors of its (k-1)-subsets(6). This is based on the isotony property of the
closure operator [14]. Indeed, let g1, a (k-1)-itemset, be one of the subsets of g,
g1
⊆ g ⇒ g
1
⊆ g. Thus, the equivalence class to which belongs g is a successor
(not necessarily an immediate one) of the equivalence class to which belongs g1 .
While comparing g to the list of the immediate successors of g1, noted L,
two cases are to be distinguished. If L is empty then g is added to L. Otherwise,
g is compared to the elements already belonging to L (cf. Proposition 2). The
imposed order in the first step allows to distinguish only two cases sketched
by Proposition 2 by replacing the frequent minimal generators X and Y by
respectively g and one of the elements of L.
Proposition 2. [15] Let X, Y ∈ FMGK, CX and CY their respective equivalence
classes:
a. If Supp(X) = Supp(Y ) = Supp(X ∪ Y ) then X and Y belong to the same
equivalence class.
b. If Supp(X) < Supp(Y ) and Supp(X) = Supp(X ∪ Y ) then CX (resp. CY ) is
a successor (resp. predecessor) of CY (resp. CX).
4 An itemset belong to GBd− if it is an infrequent minimal generator and all its subsets
are frequent minimal generators.
5 By the term ”immediate successor”, we indicate a frequent minimal generator, unless
otherwise specified.
6 In the first step and for each candidate of size k, links towards its subsets of size
(k-1) are stored during the check of the ideal order property.
Prince: An Algorithm for Generating Rule Bases 351
During these comparisons and to avoid redundant closure computations,
Prince introduces two complementary functions. These functions make it possible
to maintain the concept of equivalence class throughout processing. To this
end, each equivalence class C will be characterized by a representative itemset,
which is the first frequent minimal generator introduced into the minimal
generator lattice. Both functions are described below:
1. Manage-Equiv-Class: This function is used if a frequent minimal generator,
say g, is compared to the representative itemset of its equivalence class,
say R. The Manage-Equiv-Class function replaces all occurrences of g by R
in the immediate successor lists in which g was added. Then, comparisons to
carry out with g will be made with R. Thus, for each equivalence class, only its
representative itemset appears in the lists of the immediate successors.
2. Representative: This function makes it possible to find, for each frequent
minimal generator g, the representative R of its equivalence class in order to
complete the immediate successors of Cg. This allows to manage only one list of
the immediate successors for all frequent minimal generators belonging to the
same equivalence class.
The pseudo-code of the second step is given by the Gen-Order procedure
(Algorithm 1). Each entry, say g, in FMGK is composed by the following fields:
(i)support: the support of g (ii) direct-subsets: the list of the (k-1)-subsets
of g (iii)immediate-succs: the list of the immediate successors of g.
4.3 Extraction of Generic Rule Bases
In this step, Prince extracts the informative association rules. For this purpose,
Prince finds the frequent closed itemset corresponding to each equivalence class
by using Proposition 3.
Proposition 3. [15] Let f and f1 be two closed itemsets such that f covers f1
in the Galois lattice LCK. Let MGf be the set of minimal generators of f. The
closed itemset f can be composed as follows: f = ∪{g|g ∈ MGf} ∪ f1 .
The traversal of the minimal generator lattice is carried out in an ascending
manner from the equivalence class whose minimal generator is the empty set(7)
(denoted C∅) to the non subsumed equivalence class(es). If the closure of the
empty set is not null, the informative exact rule between the empty set and its
closure is then extracted. Having the partial ordered structure built, Prince
extracts the informative approximative rules between the empty set and the
frequent closed itemsets of the upper cover of C∅. These closures are found, by
applying Proposition 3, using the minimal generators of each equivalence class
and the closure of the empty set. Equivalence classes forming the upper cover of
C∅ are stored which makes it possible to apply the same process to them. By the
7 This class is called the Bottom element of the lattice [9]. The corresponding closure is
calculated in the first step by collecting items having a support equal to the number
of transactions in the extraction context.